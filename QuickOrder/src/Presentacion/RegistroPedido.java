/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Logica.Categoria;
import Logica.Cliente;
import Logica.Individual;
import Logica.Promocion;
import Logica.Restaurante;
import java.awt.Image;
import java.io.File;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;

/**
 *
 * @author Jean
 */
public class RegistroPedido extends javax.swing.JInternalFrame {

    QuickOrder ventanaPrincipal;
    DefaultMutableTreeNode raiz = new DefaultMutableTreeNode("Categorias");
    DefaultMutableTreeNode nodoCategoria;
    DefaultMutableTreeNode nodoRestaurante;
    HashMap Categorias;

    public RegistroPedido(QuickOrder vp) throws SQLException {
        this.ventanaPrincipal = vp;
        initComponents();
        this.Categorias = ventanaPrincipal.CU.getCategorias();
        ScrollProductos.setViewportView(new JPanel());
        cargarArbol();
        cargarClientes();
        this.setLocation(200, 50);
        this.show();
    }

    private void cargarArbol() {
        Iterator it = Categorias.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry) it.next();
            String nombreCategoria = (String) entry.getValue();
            nodoCategoria = new DefaultMutableTreeNode(nombreCategoria);
            HashMap rest = ventanaPrincipal.CU.consultarRestaurantesPorCategoria(new Categoria(nombreCategoria));
            Iterator it2 = rest.entrySet().iterator();
            while (it2.hasNext()) {
                Map.Entry entry2 = (Map.Entry) it2.next();
                Restaurante R = (Restaurante) entry2.getValue();
                nodoRestaurante = new DefaultMutableTreeNode(R);
                nodoRestaurante.setAllowsChildren(false);
                nodoCategoria.add(nodoRestaurante);
            }
            raiz.add(nodoCategoria);
        }
        DefaultTreeModel modelo = new DefaultTreeModel(raiz);
        this.ArbolRestaurantes.setModel(modelo);
        TreeCellRenderer renderer = new RestaurantesCellRenderer();
        ArbolRestaurantes.setCellRenderer(renderer);
    }

    private void cargarClientes() throws SQLException {
        DefaultListModel model = new DefaultListModel();
        HashMap clientes = ventanaPrincipal.CU.retornarClientes();

        Iterator it = clientes.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry) it.next();
            Cliente C = ((Cliente) entry.getValue());
            model.addElement(C.getNickname());
        }
        ListaClientes.setModel(model);
    }

    private void cargarProductos(Restaurante R) {
        DefaultListModel model = new DefaultListModel();
        HashMap productos = new HashMap();
        if (R.getIndividuales() != null) {
            Iterator it = R.getIndividuales().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry entry = (Map.Entry) it.next();
                Individual I = ((Individual) entry.getValue());
                model.addElement(I.getNombre());
            }
        }
        if (R.getPromociones() != null) {
            Iterator it = R.getPromociones().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry entry = (Map.Entry) it.next();
                Promocion I = ((Promocion) entry.getValue());
                model.addElement(I.getNombre());
            }
        }
        //ListaProductos.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ScrollClientes = new javax.swing.JScrollPane();
        ListaClientes = new javax.swing.JList();
        ScrollRestaurantes = new javax.swing.JScrollPane();
        ArbolRestaurantes = new javax.swing.JTree();
        ScrollProductos = new javax.swing.JScrollPane();
        ScrollTabla = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ButtonAceptar = new javax.swing.JButton();

        setClosable(true);
        setTitle("Registro Pedido");
        setMaximumSize(new java.awt.Dimension(860, 425));
        setMinimumSize(new java.awt.Dimension(860, 425));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(860, 425));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Seleccione Cliente");
        jLabel1.setToolTipText("");

        ScrollClientes.setMaximumSize(new java.awt.Dimension(192, 163));
        ScrollClientes.setMinimumSize(new java.awt.Dimension(192, 163));
        ScrollClientes.setPreferredSize(new java.awt.Dimension(192, 163));

        ListaClientes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ListaClientes.setMinimumSize(new java.awt.Dimension(192, 163));
        ListaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaClientesMouseClicked(evt);
            }
        });
        ListaClientes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListaClientesValueChanged(evt);
            }
        });
        ScrollClientes.setViewportView(ListaClientes);

        ScrollRestaurantes.setMaximumSize(new java.awt.Dimension(151, 163));
        ScrollRestaurantes.setMinimumSize(new java.awt.Dimension(151, 163));
        ScrollRestaurantes.setPreferredSize(new java.awt.Dimension(151, 163));

        ArbolRestaurantes.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                ArbolRestaurantesValueChanged(evt);
            }
        });
        ScrollRestaurantes.setViewportView(ArbolRestaurantes);

        ScrollProductos.setMaximumSize(new java.awt.Dimension(476, 163));
        ScrollProductos.setMinimumSize(new java.awt.Dimension(476, 163));
        ScrollProductos.setPreferredSize(new java.awt.Dimension(476, 163));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Descripcion", "Tipo", "Precio", "Cantidad", "Precio Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setEnabled(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        ScrollTabla.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(5);
        }

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Seleccione Restaurante");
        jLabel2.setToolTipText("");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Seleccione Productos");
        jLabel3.setToolTipText("");

        ButtonAceptar.setText("Aceptar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollTabla)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ScrollClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ScrollRestaurantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ScrollProductos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ButtonAceptar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ScrollClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ScrollRestaurantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ScrollProductos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ButtonAceptar)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        ventanaPrincipal.setOperando(false);
        this.dispose();
    }//GEN-LAST:event_formInternalFrameClosing

    private void ListaClientesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListaClientesValueChanged

    }//GEN-LAST:event_ListaClientesValueChanged

    private void ArbolRestaurantesValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_ArbolRestaurantesValueChanged
        if(evt.getNewLeadSelectionPath() == null){
            return;
        } 
        DefaultMutableTreeNode x = (DefaultMutableTreeNode) evt.getNewLeadSelectionPath().getLastPathComponent();
        if (x.getAllowsChildren() == false) {
            PanelProductos PP = new PanelProductos();
            PP.iniciarPanel(ventanaPrincipal.CU.getCP().buscarProductosI((Restaurante) x.getUserObject()),ventanaPrincipal.CU.getCP().buscarProductosP((Restaurante) x.getUserObject()));
            ScrollProductos.setViewportView(PP);        
        }
    }//GEN-LAST:event_ArbolRestaurantesValueChanged

    private void ListaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaClientesMouseClicked

    }//GEN-LAST:event_ListaClientesMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree ArbolRestaurantes;
    private javax.swing.JButton ButtonAceptar;
    private javax.swing.JList ListaClientes;
    private javax.swing.JScrollPane ScrollClientes;
    private javax.swing.JScrollPane ScrollProductos;
    private javax.swing.JScrollPane ScrollRestaurantes;
    private javax.swing.JScrollPane ScrollTabla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
